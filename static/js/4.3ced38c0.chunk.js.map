{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Auth/Auth.css"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","IsSignUp","submitHandler","event","preventDefault","props","onAuth","switchAuthModeHandler","setState","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","controlName","updatedControls","updateObject","target","checkValidity","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","inputChangedHandler","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","isSignUp","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","htmlFor","label","module","exports"],"mappings":"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","file":"static/js/4.3ced38c0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your E-mail'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    IsSignUp: true\n  };\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  inputChangedHandler(event, controlName) {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true\n      })\n    });\n    this.setState({ controls: updatedControls });\n  }\n\n  submitHandler = event => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.IsSignUp\n    );\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return { IsSignUp: !prevState.IsSignUp };\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        touched={formElement.config.touched}\n        shouldValidate={formElement.config.validation}\n        changed={event => {\n          this.inputChangedHandler(event, formElement.id);\n        }}\n      ></Input>\n    ));\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error.message}</p>;\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\n    }\n\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType='Success'>SUBMIT</Button>\n        </form>\n        <Button clicked={this.switchAuthModeHandler} btnType='Danger'>\n          SWITCH TO {this.state.IsSignUp ? 'SIGN IN' : 'SIGN UP'}\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) =>\n      dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Auth);\n","import React from 'react';\nimport classes from './Input.css';\n\nconst input = props => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case 'input':\n      inputElement = (\n        <input\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n          onChange={props.changed}\n          value={props.value}\n        />\n      );\n      break;\n    case 'textarea':\n      inputElement = (\n        <textarea\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n          onChange={props.changed}\n          value={props.value}\n        />\n      );\n      break;\n    case 'select':\n      inputElement = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n          onChange={props.changed}\n          value={props.value}\n        />\n      );\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label} htmlFor=''>\n        {props.label}\n      </label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__2YUr1\"};"],"sourceRoot":""}