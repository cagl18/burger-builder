{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.css"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","clicked","checkoutCancelled","btnType","checkoutContinue","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHanlder","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIndentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelHandler","history","goBack","checkoutContinueHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","htmlFor","label"],"mappings":"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","file":"static/js/3.4e6ff291.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__1xBm4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__1J81r\"};","import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.css';\n\nconst checkoutSummary = props => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>We hope it tastes well!</h1>\n      <div style={{ width: '100%', margin: 'auto' }}>\n        <Burger ingredients={props.ingredients} />\n      </div>\n      <Button clicked={props.checkoutCancelled} btnType='Danger'>\n        CANCEL\n      </Button>\n      <Button clicked={props.checkoutContinue} btnType='Success'>\n        CONTINUE\n      </Button>\n    </div>\n  );\n};\n\nexport default checkoutSummary;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Street'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Zip Code'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your E-mail'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            { value: 'fastest', displayValue: 'Fastest' },\n            { value: 'cheapest', displayValue: 'Cheapest' }\n          ]\n        },\n        value: 'fastest',\n        validation: {},\n        valid: true\n      }\n    },\n    formIsValid: false\n  };\n\n  orderHanlder = event => {\n    event.preventDefault();\n\n    const formData = {};\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[\n        formElementIdentifier\n      ].value;\n    }\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    };\n\n    this.props.onOrderBurger(order, this.props.token);\n  };\n\n  inputChangedHandler = (event, inputIndentifier) => {\n    const updatedFormElement = updateObject(\n      this.state.orderForm[inputIndentifier],\n      {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.orderForm[inputIndentifier].validation\n        ),\n        touched: true\n      }\n    );\n\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIndentifier]: updatedFormElement\n    }); //cloning state\n\n    let formIsValid = true;\n\n    for (let inputIndentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIndentifier].valid && formIsValid;\n      if (!formIsValid) {\n        break;\n      }\n    }\n\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n    let form = (\n      <form onSubmit={this.orderHanlder}>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            touched={formElement.config.touched}\n            shouldValidate={formElement.config.validation}\n            changed={event => {\n              this.inputChangedHandler(event, formElement.id);\n            }}\n          ></Input>\n        ))}\n\n        <Button btnType='Success' disabled={!this.state.formIsValid}>\n          ORDER\n        </Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProp = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) =>\n      dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(\n  mapStateToProp,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios));\n","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from '../Checkout/ContactData/ContactData';\nimport { connect } from 'react-redux';\n\nclass Checkout extends Component {\n  checkoutCancelHandler = () => {\n    this.props.history.goBack();\n  };\n\n  checkoutContinueHandler = () => {\n    this.props.history.replace('/checkout/contact-data');\n  };\n\n  render() {\n    let summary = <Redirect to='/' />;\n    if (this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? (\n        <Redirect to='/' />\n      ) : null;\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            checkoutCancelled={this.checkoutCancelHandler}\n            checkoutContinue={this.checkoutContinueHandler}\n            ingredients={this.props.ings}\n          />\n          <Route\n            path={this.props.match.path + '/contact-data'}\n            component={ContactData}\n          />\n          {/* used render instead or component method to be able to pass down props */}\n        </div>\n      );\n    }\n    return summary;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased\n  };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from 'react';\nimport classes from './Input.css';\n\nconst input = props => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case 'input':\n      inputElement = (\n        <input\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n          onChange={props.changed}\n          value={props.value}\n        />\n      );\n      break;\n    case 'textarea':\n      inputElement = (\n        <textarea\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n          onChange={props.changed}\n          value={props.value}\n        />\n      );\n      break;\n    case 'select':\n      inputElement = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n          onChange={props.changed}\n          value={props.value}\n        />\n      );\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label} htmlFor=''>\n        {props.label}\n      </label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\"};"],"sourceRoot":""}