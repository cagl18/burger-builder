{"version":3,"sources":["components/Burger/BurgerIngredient/BurgerIngredient.css","components/Burger/BuildControls/BuildControl/BuildControl.css","components/Layout/Layout.css","components/Burger/Burger.css","components/Burger/BuildControls/BuildControls.css","hoc/Aux.js","components/Layout/Layout.js","components/Burger/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","components/Burger/BuildControls/BuildControl/BuildControl.js","components/Burger/BuildControls/BuildControls.js","containers/BurgerBuilder/BurgerBuilder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","aux","props","children","layout","Aux","console","log","classes","className","Content","BurgerIngredient","ingredient","this","type","BreadBottom","BreadTop","Seeds1","Seeds2","Meat","Cheese","Bacon","Salad","Component","burger","transfromedIngredients","Object","keys","ingredients","map","igKey","Array","_","index","key","reduce","arr","el","concat","length","Burger","buildControl","BuildControl","Label","label","Less","onClick","removed","disabled","More","added","controls","buildControls","BuildControls","price","toFixed","ctrl","ingredientAdded","ingredientRemoved","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","totalPrice","addIngredientHandler","updatedCounted","updatedIngredients","newPrice","setState","removeIngredientHandler","oldCount","disabledInfo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b260ce4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BreadBottom\":\"BurgerIngredient__BreadBottom__HuxZP\",\"BreadTop\":\"BurgerIngredient__BreadTop__10-cT\",\"Seeds1\":\"BurgerIngredient__Seeds1__3xHtz\",\"Seeds2\":\"BurgerIngredient__Seeds2__1cUso\",\"Meat\":\"BurgerIngredient__Meat__13nAN\",\"Cheese\":\"BurgerIngredient__Cheese__1FxeY\",\"Salad\":\"BurgerIngredient__Salad__1iTJE\",\"Bacon\":\"BurgerIngredient__Bacon__3vrAI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildControl\":\"BuildControl__BuildControl__1jYc3\",\"Label\":\"BuildControl__Label__33Z-p\",\"Less\":\"BuildControl__Less__377MJ\",\"More\":\"BuildControl__More__28-hQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout__Content__LhJtv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"Burger__Burger__3K4F-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildControls\":\"BuildControls__BuildControls__3_01f\"};","const aux = props => props.children;\n\nexport default aux;\n","import React from 'react';\nimport Aux from '../../hoc/Aux';\nimport classes from './Layout.css';\n\nconst layout = props => (\n  <Aux>\n    {console.log(classes)}\n    <div>Toolbar, SideDrawer, Backdrop</div>\n    <main className={classes.Content}>{props.children}</main>\n  </Aux>\n);\n\nexport default layout;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './BurgerIngredient.css';\n\nclass BurgerIngredient extends Component {\n  render() {\n    let ingredient = null;\n\n    switch (this.props.type) {\n      case 'bread-bottom':\n        ingredient = <div className={classes.BreadBottom} />;\n        break;\n      case 'bread-top':\n        ingredient = (\n          <div className={classes.BreadTop}>\n            <div className={classes.Seeds1} />\n            <div className={classes.Seeds2} />\n          </div>\n        );\n        break;\n      case 'meat':\n        ingredient = <div className={classes.Meat} />;\n        break;\n      case 'cheese':\n        ingredient = <div className={classes.Cheese} />;\n        break;\n      case 'bacon':\n        ingredient = <div className={classes.Bacon} />;\n        break;\n      case 'salad':\n        ingredient = <div className={classes.Salad} />;\n        break;\n      default:\n        ingredient = null;\n    }\n    return ingredient;\n  }\n}\n\nBurgerIngredient.propTypes = {\n  type: PropTypes.string.isRequired\n};\n\nexport default BurgerIngredient;\n","import React from 'react';\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient';\nimport classes from './Burger.css';\n\nconst burger = props => {\n  let transfromedIngredients = Object.keys(props.ingredients)\n    .map(igKey => {\n      return [...Array(props.ingredients[igKey])].map((_, index) => {\n        return <BurgerIngredient key={igKey + index} type={igKey} />;\n      });\n    })\n    .reduce((arr, el) => {\n      return arr.concat(el);\n    }, []);\n\n  if (transfromedIngredients.length === 0) {\n    transfromedIngredients = <p>Please start adding ingredients!</p>;\n  }\n\n  return (\n    <div className={classes.Burger}>\n      <BurgerIngredient type='bread-top' />\n      {transfromedIngredients}\n      <BurgerIngredient type='bread-bottom' />\n    </div>\n  );\n};\n\nexport default burger;\n","import React from 'react';\nimport classes from './BuildControl.css';\n\nconst buildControl = props => (\n  <div className={classes.BuildControl}>\n    <div className={classes.Label}>{props.label}</div>\n    <button\n      className={classes.Less}\n      onClick={props.removed}\n      disabled={props.disabled}\n    >\n      Less\n    </button>\n    <button className={classes.More} onClick={props.added}>\n      More\n    </button>\n  </div>\n);\n\nexport default buildControl;\n","import React from 'react';\nimport classes from './BuildControls.css';\nimport BuildControl from './BuildControl/BuildControl';\n\nconst controls = [\n  { label: 'Salad', type: 'salad' },\n  { label: 'Bacon', type: 'bacon' },\n  { label: 'Cheese', type: 'cheese' },\n  { label: 'Meat', type: 'meat' }\n];\n\nconst buildControls = props => {\n  return (\n    <div className={classes.BuildControls}>\n      <p>\n        Current Price: <strong>${props.price.toFixed(2)}</strong>\n      </p>\n      {controls.map(ctrl => (\n        <BuildControl\n          key={ctrl.label}\n          label={ctrl.label}\n          added={() => props.ingredientAdded(ctrl.type)}\n          removed={() => props.ingredientRemoved(ctrl.type)}\n          disabled={props.disabled[ctrl.type]}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default buildControls;\n","import React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\n\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nclass BurgerBuilder extends Component {\n  // constructor(props){\n  //   super(props);\n  //   this.state = {}\n  // }\n\n  state = {\n    ingredients: {\n      salad: 1,\n      bacon: 1,\n      cheese: 2,\n      meat: 2\n    },\n    totalPrice: 4\n  };\n\n  addIngredientHandler = type => {\n    const oldCount = this.state.ingredients[type];\n    const updatedCounted = oldCount + 1;\n    const updatedIngredients = {\n      ...this.state.ingredients\n    };\n    updatedIngredients[type] = updatedCounted;\n    const newPrice = INGREDIENT_PRICES[type] + this.state.totalPrice;\n    this.setState({ totalPrice: newPrice, ingredients: updatedIngredients });\n  };\n\n  removeIngredientHandler = type => {\n    const oldCount = this.state.ingredients[type];\n\n    if (oldCount <= 0) {\n      return;\n    }\n\n    const updatedCounted = oldCount - 1;\n    const updatedIngredients = {\n      ...this.state.ingredients\n    };\n    updatedIngredients[type] = updatedCounted;\n    const newPrice = INGREDIENT_PRICES[type] - this.state.totalPrice;\n    this.setState({ totalPrice: newPrice, ingredients: updatedIngredients });\n  };\n\n  render() {\n    const disabledInfo = {\n      ...this.state.ingredients\n    }; // copying the ingredients in inmutable way\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n    return (\n      <Aux>\n        <Burger ingredients={this.state.ingredients} />\n        <BuildControls\n          ingredientAdded={this.addIngredientHandler}\n          ingredientRemoved={this.removeIngredientHandler}\n          disabled={disabledInfo}\n          price={this.state.totalPrice}\n        />\n      </Aux>\n    );\n  }\n}\n\nexport default BurgerBuilder;\n","import React from 'react';\nimport Layout from './components/Layout/Layout';\nimport BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder';\n\nfunction App() {\n  return (\n    <Layout>\n      <BurgerBuilder />\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}